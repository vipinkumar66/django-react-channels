=> Definations

    WEBSOCKETS: They are communication protocol and they have Full Duplex Communication which means the connection will persists and the clients connected to it can send and recieve message at same time which means it is a two way communication. The benefit is that it has low latency as we dont have to create the connection again and again.

    ASGI: Asynchronous Gateway interface which allows us to handle asynchronous communication in real time like the web sockets.
        -> Asynchronous Communication: Unlike other traditional webservers like Apache or nginx which handle synchronous requests (request-response), the ASGI can handle multiple connections concurrently.
        -> Django channels adds the support of web sockets into the django applications.
        -> So this asgi.py application will tell django what to do when a new request comes to it.

    ABSTRACT VS ABSTRACTBASEUSER: The difference is that when you need a lot of flexibilty than go with the abstractbaseuser as here we need to define all the fields and because of which it becomes a bit complex. Where as the abstract user will have the combo from the USER AND ABSTACTBASE, it will provide pre defined stucture we can modify but not much. We can write custome USER manager for both of them.

=> Models flow
    TOPIC -> CHANNEL -> MESSAGES (This will be overall structure)

=> Viewset(create method) and serializer(create method)
    -> When to a viewset we choose a model viewset than we have to give the query to it otherwise it is going to throw the attribute error.
    -> Create method of the viewset will be called to which we are going to give our serializer and the data, and then we call the is_valid method which will see if the data is valid according to the serializer.
    -> If it is valid than it calls the perform_create which is related to the serializer create method, the serializer create will create the instance the perform_create will look for any errors or if we want to modify before or after the creation.
    -> And if we don't explicitly call this method still it will get called as it is called automatically once the create function of the viewset is invoked.

=> PERMISSIONS
    -> They are always run at the start of the code and it checks via: request.user and request.auth